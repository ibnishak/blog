<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Treppenwitze</title><link>https://ibnishak.github.io/blog/</link><description>Recent content on Treppenwitze</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright><lastBuildDate>Fri, 27 Nov 2020 13:54:24 +0530</lastBuildDate><atom:link href="https://ibnishak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Checklists</title><link>https://ibnishak.github.io/blog/post/checklists/</link><pubDate>Fri, 27 Nov 2020 13:54:24 +0530</pubDate><guid>https://ibnishak.github.io/blog/post/checklists/</guid><description>What Breaking abstract ideas down into a series of small actionable chunks
Why Convert theoretical knowledge from reading to practice (tacit knowledge to explicit knowledge). Eg: Reading a book, imitating a good some workflow Make connections between fragmented knowledge. The act of creating a checklist forces the mind to think of all the parts involved in completing a task. Minimizes uncertainty and anxiety.. Almost anything can be reduced to a series of steps â€” an algorithm.</description></item><item><title>Time Blocking</title><link>https://ibnishak.github.io/blog/post/time-blocking/</link><pubDate>Fri, 27 Nov 2020 13:30:51 +0530</pubDate><guid>https://ibnishak.github.io/blog/post/time-blocking/</guid><description>What Divide day into blocks of time dedicated to separate tasks
Why Open ended todo lists is less effective as you do easy tasks first, leaving frogs uneaten Helps to avoid perfectionism Helps to club shallow tasks and do more deep work How Prioritise task list using a weekly review and create and rough outline of time blocks At the end of day, review tasks that remain unfinished and adjust time blocks of the rest of the week Batch shallow tasks Have leisure blocks.</description></item><item><title>About</title><link>https://ibnishak.github.io/blog/about/</link><pubDate>Thu, 26 Nov 2020 14:01:31 +0530</pubDate><guid>https://ibnishak.github.io/blog/about/</guid><description>Hi there My name is Rizwan Ishak. In my free time I tend to read and experiment with computer. This is a collection of things which you might find interesting. You can follow me on twitter at @OneLittleRiz</description></item><item><title>A recommendation for Paragliding</title><link>https://ibnishak.github.io/blog/post/paragliding/</link><pubDate>Tue, 27 Oct 2020 19:46:59 +0530</pubDate><guid>https://ibnishak.github.io/blog/post/paragliding/</guid><description>When you are paragliding, for a few moments you just get to leave everything behind. You are gliding so far above the ground that it is almost as if you are suspended between earth and sky. Beyond being geo-spatially detached, you brain just attains a hyper-focus that you become &amp;lsquo;present&amp;rsquo; - completely unaware of past and future. In this state you are acutely aware of each passing second, and it is one of the best possible time to attain this flow.</description></item><item><title>Building markor from source code in linux</title><link>https://ibnishak.github.io/blog/post/building-markor-in-linux/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/building-markor-in-linux/</guid><description>Markor can be installed from Google playstore, FDroid as well as releases page of this repo. Nevertheless, if you want the cutting edge version, here are the general instructions for Linux platform. Open terminal run the following set of commands one by one.
If you do not have android-sdk installed, you need to install it first. mkdir $HOME/android-sdk-dl if test ! -e $HOME/android-sdk-dl/sdk-tools.zip ; then curl https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip &amp;gt; $HOME/android-sdk-dl/sdk-tools.</description></item><item><title>Vim: Copy and paste to termux clipboard</title><link>https://ibnishak.github.io/blog/post/copy-to-termux-clip/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/copy-to-termux-clip/</guid><description>Copying to system clipboard from vim is usually done by using the &amp;ldquo;+ register. Unfortunately this will not work in termux. Here is a workaround to cut, copy and paste from android clipboard. Remember that you need termux-apk tools for this to work.
Add the following to vimrc vnoremap &amp;lt;C-x&amp;gt; :!termux-clipboard-set&amp;lt;CR&amp;gt;vnoremap &amp;lt;C-c&amp;gt; :w !termux-clipboard-set&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;inoremap &amp;lt;C-v&amp;gt; &amp;lt;ESC&amp;gt;:read !termux-clipboard-get&amp;lt;CR&amp;gt;i Source the vimrc or reload vim. In visual mode, you can now use &amp;ldquo;Ctrl-x&amp;rdquo; to cut, &amp;ldquo;Ctrl-c&amp;rdquo; to copy to termux clipboard.</description></item><item><title>Adding custom language highlight and fonts to markor</title><link>https://ibnishak.github.io/blog/post/adding-custom-language-highlight-to-markor/</link><pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/adding-custom-language-highlight-to-markor/</guid><description>My code blocks do not have syntax highlighting. Markor has inbuilt support for syntax highlighting of a select few languages. However markor comes bundled with prism js. This means adding syntax highlighting for any of 199 languages supported by prism is a matter of two steps
Go to prism CDN and copy the link corresponding to your language. In the markor app, open Settings&amp;gt;View mode and add the the following snippet to Inject -&amp;gt; head after changing the link.</description></item><item><title>zsh: Parameter expansion cheatsheet</title><link>https://ibnishak.github.io/blog/post/zsh-parameter-expansion-cheatsheet/</link><pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/zsh-parameter-expansion-cheatsheet/</guid><description>Parent directory echo $PWD # /home/learning/pf/zsh/zsh2.00/src echo $PWD:h # /home/learning/pf/zsh/zsh2.00 Grandparent directry echo $PWD:h:h # /home/learning/pf/zsh Current dir without path echo $PWD:t # src Extracting file name and extension name=foo.c echo $name:r # foo echo $name:e # c Substituting parts of variable name=foo.c echo $name:s/foo/bar/ # bar.c Mass renaming of files
ls # foo.c foo.h foo.o foo.pro for i in foo.*; mv $i $i:s/foo/bar/ ls # bar.c bar.h bar.o bar.pro Uppercasing and Lower casing xx=Test echo $xx:u # TEST echo $xx:l # test Cutting patterns from beginning and end Cut from end echo $PWD # /home/learning/pf/zsh/zsh2.</description></item><item><title>Setting startpage.com as default search engine in Firefox for Android</title><link>https://ibnishak.github.io/blog/post/adding-startpage-tof-firefox-android/</link><pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/adding-startpage-tof-firefox-android/</guid><description> Go to startpage.com Long press inside the search box In the popup menu, click &amp;ldquo;Add search engine&amp;rdquo; Open the overflow menu (the three vertical dots at the top right corner of Firefox window) Go to Settings&amp;gt;Search Long press on startpage option Choose &amp;ldquo;Set as default&amp;rdquo;</description></item><item><title>Emacs: Adding clipboad.js to HTML exports</title><link>https://ibnishak.github.io/blog/post/emacs-adding-clipboard-js-to-html-exports/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/emacs-adding-clipboard-js-to-html-exports/</guid><description>Clipboard.js is a javascript solution to add copy buttons to &amp;lt;pre&amp;gt; or &amp;lt;code&amp;gt; regions in your html file. F
Since many of the Emacs community use org-publish for blogging, it seems like a good idea to note how to include clipboard.js snippets in the org mode html exports.
Add the following to your init.el (defun org-html-src-block (src-block contents info) &amp;#34;Transcode a SRC-BLOCK element from Org to HTML. CONTENTS holds the contents of the item.</description></item><item><title>Emacs: Notes on keybindings in GNU+Linux</title><link>https://ibnishak.github.io/blog/post/emacs-notes-on-keybindings-in-linux/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/emacs-notes-on-keybindings-in-linux/</guid><description>Pointless introduction Emacs being a rather keyboard driven editor, tends to rely heavily on keyboard shortcuts. The non-conformity of keybindings in emacs is a rather tricky hurdle. While it is accepted that Emacs is practically an operating system and the true emacs-jedi can do everything in Emacs itself, the rest of mortals have to interact with other, normal softwares. Let us consider the simple tasks of cut, copy and paste.</description></item><item><title>Spotting bad ideologies</title><link>https://ibnishak.github.io/blog/post/spotting-bad-ideology/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/spotting-bad-ideology/</guid><description>&amp;ldquo;Doubt each old thing you know. Require current evidence. Make it prove itself to be true today. Otherwise, let it go.&amp;rdquo; - really cannot remember who said it.
What is an ideology An ideology is a coherent set of ideas that should help you make sense of the world. Set of normative beliefs and values that a person or other entity hold.
Normative : Standard for evaluating or making judgments about behavior or outcomes.</description></item><item><title>TW5: CSS woes with smaller screens</title><link>https://ibnishak.github.io/blog/post/tw5-small-screen-css-woes/</link><pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/tw5-small-screen-css-woes/</guid><description>We will keep this strictly to the ease o use of TW5 on smaller screens. I have been using TW5 for 4 years now, at the end of which I reached 2 conclusions.
It is not intended to handle large amount of data. It is not well adapted for mobile platform. The first problem had solutions - categorize and split the data. The second problem took a long time for a satisfactory resolution.</description></item><item><title>TW5: Options in Android Platform</title><link>https://ibnishak.github.io/blog/post/options-in-android-platform/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://ibnishak.github.io/blog/post/options-in-android-platform/</guid><description>Saving a TW5 wiki in android has 7 possible solutions. We shall take a quick look at each of them.
Android Apps Tiddloid Andtidwiki Webdav server Servers using Termux Built in server. Tiddlyserver. Bob Widdly Android Apps Tiddloid Tiddloid is the latest android app to save tiddlywiki in android. It is surprisingly good. It allows you to add TW5s stored anywhere in your internal memory, saves without glitches and even has dark mode.</description></item></channel></rss>